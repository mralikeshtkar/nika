<?php

namespace App\Exceptions;

use App\Exceptions\User\UserAccountIsInactiveException;
use App\Responses\Api\ApiResponse;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Routing\Exception\MethodNotAllowedException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        if ($request->wantsJson()) {
            if ($e instanceof ModelNotFoundException)
                return ApiResponse::error(trans(":attribute not found", ['attribute' => trans(class_basename($e->getModel()))]), Response::HTTP_NOT_FOUND)->send();
            else if ($e instanceof AuthenticationException)
                return ApiResponse::error(trans("Login to your account first"), Response::HTTP_UNAUTHORIZED)->send();
            else if ($e instanceof UserAccountIsInactiveException)
                return parent::render($request, $e);
            else if ($e instanceof NotFoundHttpException)
                return ApiResponse::error(trans("Route not found"), Response::HTTP_METHOD_NOT_ALLOWED)->send();
            else if ($e instanceof MethodNotAllowedHttpException)
                return ApiResponse::error(trans("Route not allowed"), Response::HTTP_METHOD_NOT_ALLOWED)->send();
            /*else
                return ApiResponse::error(trans("Internal server error"))
                    ->addError('message', $e->getMessage())
                    ->send();*/
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
